import pandas as pdimport numpy as npimport matplotlib.pyplot as pltimport osfrom scipy.integrate import odeint# === 1. ПАРАМЕТРЫ СИСТЕМЫ SPICA ===G = 6.67430e-11            # Гравитационная постояннаяAU = 1.496e11              # Астрономическая единицаday = 86400                # Секунда в суткахMsun = 1.98847e30          # Масса СолнцаRsun = 6.957e8             # Радиус Солнца# Параметры системыm1 = 10.25 * Msunm2 = 6.97 * Msuna = 0.12 * AUperiod = 4.0145 * dayR1 = 10.0 * RsunR2 = 6.0 * RsunL1 = 1.0L2 = 0.3inclination_deg = 90inclination_rad = np.radians(inclination_deg)# === 2. МОДЕЛЬ ДВУХ ТЕЛ ===def two_body_system(y, t, m1, m2):    r1 = y[:3]    r2 = y[3:6]    v1 = y[6:9]    v2 = y[9:12]    r = r2 - r1    r_norm = np.linalg.norm(r)    a1 = G * m2 / r_norm**3 * r    a2 = -G * m1 / r_norm**3 * r    return np.concatenate([v1, v2, a1, a2])mu = m1 + m2r1_0 = np.array([-m2/mu * a, 0, 0])r2_0 = np.array([m1/mu * a, 0, 0])v_orb = np.sqrt(G * mu / a)v1_0 = np.array([0, -m2/mu * v_orb, 0])v2_0 = np.array([0, m1/mu * v_orb, 0])y0 = np.concatenate([r1_0, r2_0, v1_0, v2_0])t_max = 2 * periodNpoints = 5000t = np.linspace(0, t_max, Npoints)sol = odeint(two_body_system, y0, t, args=(m1, m2))# --- Поворот по наклону ---def rotate_inclination(sol, inc_rad):    sol_rot = sol.copy()    for i_obj in [0, 1]:        ix, iy, iz = 3 * i_obj, 3 * i_obj + 1, 3 * i_obj + 2        x, y, z = sol[:, ix], sol[:, iy], sol[:, iz]        x_new = x        y_new = y * np.cos(inc_rad) - z * np.sin(inc_rad)        z_new = y * np.sin(inc_rad) + z * np.cos(inc_rad)        sol_rot[:, ix] = x_new        sol_rot[:, iy] = y_new        sol_rot[:, iz] = z_new    return sol_rotsol_rot = rotate_inclination(sol, inclination_rad)# --- Синтетическая кривая блеска ---def calc_light_curve(sol_xyz, R1, R2, L1, L2):    lc = np.ones(len(sol_xyz)) * (L1 + L2)    for i in range(len(sol_xyz)):        xA, yA, zA = sol_xyz[i, :3]        xB, yB, zB = sol_xyz[i, 3:6]        proj_dist = np.sqrt((xB - xA)*2 + (yB - yA)*2)        if proj_dist < (R1 + R2):            overlap = (R1 + R2) - proj_dist            if zA < zB:                frac = min(1.0, overlap / R2)                lc[i] = L1 + L2 * (1 - 0.5 * frac**2)            else:                frac = min(1.0, overlap / R1)                lc[i] = L2 + L1 * (1 - 0.5 * frac**2)    return lcsolA = sol_rot[:, :3]solB = sol_rot[:, 3:6]sol_for_lc = np.hstack((solA, solB))light_curve = calc_light_curve(sol_for_lc, R1, R2, L1, L2)# Нормализуем модельную кривую блескаlight_curve_normalized = light_curve / np.max(light_curve)# Считаем фазу для моделиsynthetic_phase = (t / period) % 1sorted_indices = np.argsort(synthetic_phase)synthetic_phase_sorted = synthetic_phase[sorted_indices]brightness_sorted = light_curve_normalized[sorted_indices]# Сглаживание моделиdef moving_average(x, w):    return np.convolve(x, np.ones(w), 'same') / wbrightness_smoothed = moving_average(brightness_sorted, 50)# === 3. РЕАЛЬНЫЕ ДАННЫЕ ===file_path = r'/Users/guldanasultanbekova/Downloads/APJ132511.54-110941.4.csv'if os.path.exists(file_path):    print("Файл найден! Загружаем данные...")    data = pd.read_csv(file_path)else:    raise FileNotFoundError(f"Файл не найден по пути: {file_path}")print("Столбцы в файле:", data.columns.tolist())print(data.head())# ✅ Здесь надо подставить свои названия колонок!# Например, если названия колонок в твоём файле 'hjd' и 'mag':data = data.dropna(subset=['hjd', 'mag'])data['flux'] = 10 ** (-0.4 * data['mag'])data['flux_normalized'] = data['flux'] / data['flux'].max()# Считаем фазу для реальных данныхdata['phase'] = (data['hjd'] % (period / day)) / (period / day)data = data.sort_values('phase')# === 4. СРАВНИТЕЛЬНЫЙ ГРАФИК ===plt.figure(figsize=(10, 6))plt.scatter(data['phase'], data['flux_normalized'], s=15, alpha=0.7,            label='Реальные данные (фаза)', color='cornflowerblue')plt.plot(synthetic_phase_sorted, brightness_smoothed, color='orange',         label='Синтетическая модель (сглаженная)', linewidth=2)plt.xlabel('Фаза (0-1)', fontsize=12)plt.ylabel('Нормированная яркость', fontsize=12)plt.title('Фазовая кривая блеска системы Spica (α Vir)', fontsize=14)plt.legend(fontsize=10)plt.grid(alpha=0.3)plt.tight_layout()plt.savefig('spica_phase_curve.png', dpi=300)plt.savefig('spica_phase_curve.pdf')plt.show()print("Готово! График сохранён как PNG и PDF ✅")